#! /bin/sh
###################################################################
# WPA Connect (command connect)
# 2009-2016 Hpsaturn v1.4
# hpsaturn@gmail.com
###################################################################
# 
# Installation:
#
# - mkdir CPATH and link symbolic on home root to this (see config section)
# - copy this script on ~/bin and make link simbolic on /usr/bin
#
#__________________________________________________________________
#
# Main Commands:
#
# Add new network:
# $ connect add name ssid passw 
#
# Connect to network automatically
# $ sudo connect 
#
# Force connect to specific network
# $ sudo connect networkname
#
# Scan networks
# $ sudo connect scanning
#_______________________________________________________________
#
# Others commands (WPA):
#
# stop      (down interface and kill wpasupplicant)
# remove    (remove driver module)
# install   (install driver module)
# auto      (default)(scan and search networks on config directory then connect)
#
# Others wifi encryption:
#
# open ssid         (connect to open network)
# adhoc ssid passw  (connect to Ad-Hoc wifi)
# wep ssid passw    (connect to wep wifi) 
#
# Others:
#
# switch    (switch to eth0)
#
####################################################################
#
# REV000: open network methods and custom parameters
# RE0001: wep network methods
# REV002: scan functions and Ad-Hoc support
# REV003: Refactor on basic methods
# REV004: Add messages on main methods
# REV005: WEP tethering
# REV006: Open networks fixes and stop, install and remove device
# REV007: Publish on github https://github.com/hpsaturn/wconnect
# REV008: Add stop after wpa connect. Fix remove driver
# REV009: Automatic reconnection, add network, change default method
####################################################################

###########################
######## CONFIG ###########
###########################

CONFIG="$1"
CPATH=~/.wpa_networks
DEVICE=wlan0
MODULE=iwldvm
#MODULE=iwlwifi

#### endconfig ######

wpa_connect () {
    if [ -e $CPATH/wpa_$CONFIG.conf ]; then
        echo -n "connecting with: $CONFIG"
        check_module; echo -n "."
        wpa_stop 1> /dev/null; echo -n "."
        enable_device 1> /dev/null; echo -n "."
        iwconfig $DEVICE essid $CONFIG; echo -n "."
        sleep 1
        wpa_supplicant -B -c $CPATH/wpa_$CONFIG.conf -i $DEVICE -s 2> /dev/null; echo -n "."
        sleep 1 ; echo -n "."
        dhclient_service 1> /dev/null; echo -n "."
        echo  "done."
    else
        echo "config file: $CPATH/wpa_$CONFIG.conf not found!!"
        exit 1
    fi 
}

wpa_stop () {
    echo -n "wpa_stop.."
    killall wpa_supplicant 2> /dev/null
    killall dhclient 2> /dev/null
    killall dhclient 2> /dev/null
    ifconfig $DEVICE down
    echo "done."
}

wpa_auto_connect () {

    echo -n "scanning networks."
    install_module 1> /dev/null
    echo -n "."
    wpa_stop 1> /dev/null
    sleep 1
    remove_module 1> /dev/null
    echo -n "."
    install_module 1> /dev/null
    echo -n "."
    enable_device 1> /dev/null
    echo -n "."
    iwlist $DEVICE scanning|grep -i ssid|sed s/ESSID:\"//|sed s/\"//|sed 's/                    //'>/tmp/current_networks
    echo -n "."
    cd $CPATH
    grep -orf /tmp/current_networks|head -n 1|awk -v FS="(wpa_|.conf)" '{print $2}'>/tmp/current_config
    CONFIG=`cat /tmp/current_config`

    if [ "$CONFIG" = "" ]; then
        echo "not found network, retry.."
        wpa_auto_connect
    else
        echo "done."
        wpa_connect 
    fi

}

open_network () {
    echo -n "connect to $1.."
    iwconfig $DEVICE essid "$1"
    echo "done."
    dhclient_service
}

wep_network () {
    echo -n "connect to $1.."
    iwconfig $DEVICE mode managed essid $1 key s:"$2"
    echo "done."
    dhclient_service
}

adhoc_network () {
    remove_module
    sleep 2
    install_module
    sleep 2
    echo -n "connect to $1.."
    iwconfig $DEVICE mode Ad-Hoc
    sleep 1
    iwconfig $DEVICE essid $1 key s:'$2'
    echo "done."
    enable_device 
    dhclient_service
}

check_module () {
    ismodule=`lsmod | grep $MODULE`
    if [ "$ismodule" = "" ]; then
        install_module
    fi
}

remove_module () {
    echo -n "remove modules.."
    wpa_stop
    modprobe -rv $MODULE
    echo "done."
}

install_module () {
    echo -n "install modules.."
    modprobe $MODULE
    echo "done."
}

scan_networks () {
    enable_device 
    iwlist $DEVICE scanning 
}

enable_device () {
    echo -n "enable device $DEVICE.."
    ifconfig $DEVICE up
    sleep 2
    echo "done."
}

dhclient_service () {
    echo -n "dhclient service.."
    dhclient $DEVICE &> /dev/null
    echo "done."
}

switchToEth0(){
    wpa_stop
    remove_module
    echo -n "dhclient service.."
    dhclient eth0 2> /dev/null
    echo "done."
}

network_add () {
    echo "creating config for $1.."
    wpa_passphrase "$2" "$3" > $CPATH/wpa_$1.conf
    cat $CPATH/wpa_$1.conf
    echo "done."
}

#########################################################
######################## MAIN ###########################
#########################################################


if [ "$CONFIG" = "" ]; then
    wpa_auto_connect  # not config try auto connection
else
    case "$1" in
        scan)
            scan_networks
            ;;
        open)
            open_network "$2"
            ;;
        remove)
            remove_module
            ;;
        install)
            install_module
            ;;
        reload)
            remove_module
            sleep 1
            install_module
            wpa_auto_connect
            ;;
        stop)
            wpa_stop
            ;;
        wep)
            wep_network $2 $3   # essid key
            ;;
        adhoc)
            adhoc_network $2 $3   # essid key
            ;;
        switch)
            switchToEth0
            ;;
        auto)
            wpa_auto_connect
            ;;
        add)
            network_add $2 $3 $4
            ;;
        *)
            wpa_connect
            ;;
    esac
fi

exit 0
